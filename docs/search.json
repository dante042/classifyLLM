[{"path":"https://dante042.github.io/classifyLLM/articles/audit-and-reproducibility.html","id":"why-audit-mode","dir":"Articles","previous_headings":"","what":"Why audit mode","title":"Audit mode & reproducibility","text":"Transparency matters — audit_mode = TRUE lets capture model metadata, raw responses, rationales.","code":""},{"path":"https://dante042.github.io/classifyLLM/articles/audit-and-reproducibility.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Audit mode & reproducibility","text":"","code":"df <- tibble(   text = c(\"Increase in arrivals reported\", \"Shelter conditions improved\") )  df |>   mutate(     out = classify_llm(       text,       categories = c(\"Protection\",\"Shelter\",\"Health\"),       audit_mode = TRUE     )   ) |>   tidyr::unnest_wider(out) |>   select(text, label, rationale, model, ts)"},{"path":"https://dante042.github.io/classifyLLM/articles/audit-and-reproducibility.html","id":"save-an-audit-log","dir":"Articles","previous_headings":"","what":"Save an audit log","title":"Audit mode & reproducibility","text":"Note Reproducibility checklist - Record model temperature - Pin provider versions possible - Save timestamps raw responses","code":"df |>   mutate(out = classify_llm(text, categories = c(\"A\",\"B\"), audit_mode = TRUE)) |>   tidyr::unnest_wider(out) |>   readr::write_csv(\"audit_log.csv\")"},{"path":"https://dante042.github.io/classifyLLM/articles/edge-cases.html","id":"missing-or-empty-text","dir":"Articles","previous_headings":"","what":"Missing or empty text","title":"Handling edge cases & guardrails","text":"","code":"df <- tibble(text = c(\"ok\", NA, \"   \"))  df |>   mutate(     label = classify_llm(       text,       categories = c(\"Yes\", \"No\")     )   )"},{"path":"https://dante042.github.io/classifyLLM/articles/edge-cases.html","id":"out-of-set-or-ambiguous-responses","dir":"Articles","previous_headings":"","what":"Out-of-set or ambiguous responses","title":"Handling edge cases & guardrails","text":"Warning Tip: can always post-process LLM output recode() lookup table enforce strict categories.","code":"df <- tibble(text = c(\"fine\", \"bad\", \"so-so\", \"excellent\"))  df |>   mutate(     raw = classify_llm(text, categories = c(\"Positive\",\"Negative\")),     label = dplyr::recode(raw,       \"so-so\" = \"Neutral\",       .default = raw     )   )"},{"path":"https://dante042.github.io/classifyLLM/articles/edge-cases.html","id":"long-inputs-and-rate-limits","dir":"Articles","previous_headings":"","what":"Long inputs and rate limits","title":"Handling edge cases & guardrails","text":"Use batch_size delay control throughput:","code":"df |>   mutate(     category = classify_llm(       text,       categories = c(\"Info\",\"Complaint\",\"Request\"),       batch_size = 5,       delay = 2     )   )"},{"path":"https://dante042.github.io/classifyLLM/articles/getting-started.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting started with classifyLLM","text":"","code":"# install.packages(\"remotes\") remotes::install_github(\"dante042/classifyLLM\")"},{"path":"https://dante042.github.io/classifyLLM/articles/getting-started.html","id":"quick-example","dir":"Articles","previous_headings":"","what":"Quick example","title":"Getting started with classifyLLM","text":"","code":"df <- tibble(   id = 1:5,   text = c(     \"Great progress on the program.\",     \"This is unacceptable performance.\",     \"Neutral report with mixed results.\",     \"Strong positive outcomes in protection.\",     \"Severe constraints and delays reported.\"   ) )  df |>   mutate(     sentiment = classify_llm(       text,       categories = c(\"Positive\", \"Neutral\", \"Negative\")     )   )"},{"path":"https://dante042.github.io/classifyLLM/articles/getting-started.html","id":"use-with-across","dir":"Articles","previous_headings":"","what":"Use with across()","title":"Getting started with classifyLLM","text":"Note Reproducibility: set temperature = 0 minimize randomness pin model version consistent results.","code":"df |>   mutate(     across(text, ~ classify_llm(.x, categories = c(\"Pos\",\"Neg\",\"Neutral\")))   )"},{"path":"https://dante042.github.io/classifyLLM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dante Sanchez. Author, maintainer.","code":""},{"path":"https://dante042.github.io/classifyLLM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sanchez D (2025). classifyLLM: Tidy LLM-Powered Classification Columns. R package version 0.1.0, https://github.com/dante042/classifyLLM.","code":"@Manual{,   title = {classifyLLM: Tidy LLM-Powered Classification for Columns},   author = {Dante Sanchez},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/dante042/classifyLLM}, }"},{"path":"https://dante042.github.io/classifyLLM/index.html","id":"classifyllm-","dir":"","previous_headings":"","what":"Tidy LLM-Powered Classification for Columns","title":"Tidy LLM-Powered Classification for Columns","text":"classifyLLM brings power modern large language models (LLMs) directly tidyverse data pipelines.offers simple, transparent, auditable way classify text predefined categories—without need train maintain machine-learning models. combining R’s native data-wrangling syntax LLM-based reasoning, classifyLLM allows analysts apply consistent classification logic across large datasets using single line code inside mutate(). package handles prompt construction, model communication, output parsing automatically, returning results tidy columns integrate seamlessly existing workflows. makes classifyLLM particularly useful text-rich humanitarian, social science, policy datasets—labels categories often context-specific traditional supervised models difficult build due limited training data changing definitions.","code":""},{"path":"https://dante042.github.io/classifyLLM/index.html","id":"compass-why-this-package","dir":"","previous_headings":"","what":"🧭 Why this package","title":"Tidy LLM-Powered Classification for Columns","text":"Analysts researchers often need classify open-ended text fields: - survey responses interview transcripts - “” categories datasets - qualitative notes reports - lists job titles, symptoms, objects Traditional NLP workflows require model training, feature engineering, external tools.classifyLLM lets use LLM (e.g. GPT-4) perform classification directly, within data pipeline.","code":""},{"path":[]},{"path":"https://dante042.github.io/classifyLLM/index.html","id":"package-installation","dir":"","previous_headings":"","what":"📦 Installation","title":"Tidy LLM-Powered Classification for Columns","text":"can install development version classifyLLM GitHub using {remotes}: using package, make sure OpenAI API key available environment variable: store permanently .Renviron file:","code":"# install remotes if needed install.packages(\"remotes\")  # install classifyLLM from GitHub remotes::install_github(\"dante042/classifyLLM\")  # load the package library(classifyLLM) Sys.setenv(OPENAI_API_KEY = \"your_api_key_here\") usethis::edit_r_environ() # then add: OPENAI_API_KEY=your_api_key_here"},{"path":"https://dante042.github.io/classifyLLM/index.html","id":"jigsaw-example","dir":"","previous_headings":"","what":"🧩 Example","title":"Tidy LLM-Powered Classification for Columns","text":"","code":"library(classifyLLM) library(dplyr)  Sys.setenv(OPENAI_API_KEY = \"sk-...\")   # or classifyLLM::set_openai_key()  tibble::tibble(animal = c(\"siamese kitty\", \"golden retriever\", \"parakeet\")) |>   mutate(species = classify_llm(     animal,     categories = c(\"cat\", \"dog\", \"bird\"),     model = \"gpt-4o-mini\",     temperature = 0   ))"},{"path":"https://dante042.github.io/classifyLLM/index.html","id":"brain-new-classify-using-a-data-frame-of-categories","dir":"","previous_headings":"","what":"🧠 New: Classify using a data frame of categories","title":"Tidy LLM-Powered Classification for Columns","text":"classify_llm() lets define categories directly function call, new classify_df() function lets provide tidy data frame categories optional descriptions, perfect taxonomy stored CSV shared file.","code":"library(classifyLLM) library(dplyr)  # Example texts texts <- tibble::tibble(   id = 1:3,   content = c(     \"Food distribution in border camp delayed by insecurity.\",     \"Price inflation accelerates in host communities.\",     \"Asylum application processing times decrease.\"   ) )   # Category definitions  categories <- tibble::tribble(   ~category,       ~description,   \"Protection\",    \"Risks, incidents, access to territory/asylum, GBV/CP\",   \"Basic Needs\",   \"Shelter, food, WASH, core relief items\",   \"Livelihoods\",   \"Jobs, income, markets, prices\",   \"Procedures\",    \"RSD, documentation, processing, status\" )  # Classify with a tidy category table texts |>    classify_df(content, categories = categories, model = \"gpt-4o-mini\")  #> # A tibble: 3 × 4 #>      id content                                         .pred_category .pred_score #>   <int> <chr>                                           <chr>                <dbl> #> 1     1 Food distribution in border camp delayed by ... Basic Needs          0.87 #> 2     2 Price inflation accelerates in host communit... Livelihoods          0.91 #> 3     3 Asylum application processing times decrease.   Procedures           0.93"},{"path":"https://dante042.github.io/classifyLLM/reference/classifyLLM.html","id":null,"dir":"Reference","previous_headings":"","what":"classifyLLM: Tidy LLM-Powered Classification — classifyLLM","title":"classifyLLM: Tidy LLM-Powered Classification — classifyLLM","text":"Classify character vectors predefined categories using Large Language Model (LLM) OpenAI, designed fit naturally tidyverse pipelines (e.g., mutate()). Includes helpers prompts safe fallbacks.","code":""},{"path":[]},{"path":"https://dante042.github.io/classifyLLM/reference/classifyLLM.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"classifyLLM: Tidy LLM-Powered Classification — classifyLLM","text":"Maintainer: Dante Sanchez @example.com","code":""},{"path":"https://dante042.github.io/classifyLLM/reference/classify_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify text using categories provided in a data frame — classify_df","title":"Classify text using categories provided in a data frame — classify_df","text":"classify_df() thin wrapper around classify_llm() accepts tidy table categories (optional descriptions) instead separate vectors. appends predicted category (, optionally, probabilities) input data.","code":""},{"path":"https://dante042.github.io/classifyLLM/reference/classify_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify text using categories provided in a data frame — classify_df","text":"","code":"classify_df(   .data,   text_col,   categories,   category_col = \"category\",   description_col = \"description\",   id_col = NULL,   return_probs = FALSE,   .progress = interactive(),   ... )"},{"path":"https://dante042.github.io/classifyLLM/reference/classify_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify text using categories provided in a data frame — classify_df","text":".data data.frame/tibble containing text classify. text_col Column .data text classify (tidy-eval). categories data.frame/tibble category definitions. category_col Column name categories holding category labels (default \"category\"). description_col Column name categories category descriptions (default \"description\"). missing/NULL, categories passed without descriptions. id_col Optional column .data carry identifier (useful joins/debugging). return_probs Logical; TRUE, returns long-format table per-category probabilities joined back .data (one row per text × category). FALSE (default), top prediction score added. .progress Logical; show progress bar classifying many rows. Default: interactive(). ... Additional arguments forwarded classify_llm() (e.g. model, temperature, top_n, seed, system_prompt, etc.).","code":""},{"path":"https://dante042.github.io/classifyLLM/reference/classify_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify text using categories provided in a data frame — classify_df","text":"return_probs = FALSE (default): .data two new columns: .pred_category (chr) .pred_score (dbl; interpretation depends underlying model) return_probs = TRUE: tibble .data columns plus: .category (chr) .prob (dbl)","code":""},{"path":"https://dante042.github.io/classifyLLM/reference/classify_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify text using categories provided in a data frame — classify_df","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr) texts <- tibble::tibble(id = 1:3,   content = c(     \"Food distribution in border camp delayed by insecurity.\",     \"Price inflation accelerates in host communities.\",     \"Asylum application processing times decrease.\") )  cats <- tibble::tribble(   ~category,       ~description,   \"Protection\",    \"Risks, incidents, access to territory/asylum, GBV/CP\",   \"Basic Needs\",   \"Shelter, food, WASH, core relief items\",   \"Livelihoods\",   \"Jobs, income, markets, prices\",   \"Procedures\",    \"RSD, documentation, processing, status\" )  # Top prediction per row texts |> classify_df(content, categories = cats, model = \"gpt-4o-mini\")  # Full probability table texts |> classify_df(content, categories = cats, return_probs = TRUE) } # }"},{"path":"https://dante042.github.io/classifyLLM/reference/classify_llm.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify a character vector into predefined categories using an LLM — classify_llm","title":"Classify a character vector into predefined categories using an LLM — classify_llm","text":"Designed tidyverse pipelines. Sends element x model strict instruction return exactly one label categories.","code":""},{"path":"https://dante042.github.io/classifyLLM/reference/classify_llm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify a character vector into predefined categories using an LLM — classify_llm","text":"","code":"classify_llm(   x,   categories,   model = \"gpt-4o-mini\",   temperature = 0,   batch_size = 1L,   delay = 0,   verbose = FALSE )"},{"path":"https://dante042.github.io/classifyLLM/reference/classify_llm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify a character vector into predefined categories using an LLM — classify_llm","text":"x Character vector classify. categories Character vector allowed categories (labels). model OpenAI model name. Default: \"gpt-4o-mini\". temperature Numeric 0,1; default 0 deterministic outputs. batch_size Integer; number elements per API call batch. Default 1. delay Seconds sleep batches avoid rate limits. Default 0. verbose Logical; print progress info. Default FALSE.","code":""},{"path":"https://dante042.github.io/classifyLLM/reference/classify_llm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify a character vector into predefined categories using an LLM — classify_llm","text":"factor levels = categories, aligned input length.","code":""},{"path":"https://dante042.github.io/classifyLLM/reference/classify_llm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify a character vector into predefined categories using an LLM — classify_llm","text":"","code":"if (FALSE) { # \\dontrun{ Sys.setenv(OPENAI_API_KEY = \"sk-...\") classify_llm(   x = c(\"siamese kitty\",\"golden retriever\",\"parakeet\"),   categories = c(\"cat\",\"dog\",\"bird\") ) } # }"},{"path":"https://dante042.github.io/classifyLLM/reference/set_openai_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Set OpenAI API Key — set_openai_key","title":"Set OpenAI API Key — set_openai_key","text":"Set OpenAI API Key","code":""},{"path":"https://dante042.github.io/classifyLLM/reference/set_openai_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set OpenAI API Key — set_openai_key","text":"","code":"set_openai_key(key)"},{"path":"https://dante042.github.io/classifyLLM/reference/set_openai_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set OpenAI API Key — set_openai_key","text":"key Character string API key.","code":""}]
